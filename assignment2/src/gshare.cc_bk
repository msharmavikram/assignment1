/*
 * Copyright (c) 2014 The Regents of The University of Michigan
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met: redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer;
 * redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution;
 * neither the name of the copyright holders nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Anthony Gutierrez
 */



//This implements GShare. ChoicePredictor acts as PHT here. 



/********************* COPIED FROM BI-MODE *********************/

#include "cpu/pred/gshare.hh"

#include "base/bitfield.hh"
#include "base/intmath.hh"
//FIXME:instShiftAmt
Gshare::Gshare(const GshareParams *params)
    : BPredUnit(params),instShiftAmt(params->instShiftAmt),
      globalHistoryReg(params->numThreads, 0),
      globalHistoryBits(ceilLog2(params->localPredictorSize)),
      localPredictorSize(params->localPredictorSize),
      localCtrBits(params->localCtrBits) 
{
    if (!isPowerOf2(localPredictorSize))
        fatal("Invalid local predictor size.\n");

    localCounters.resize(localPredictorSize);

    for (int i = 0; i < localPredictorSize; ++i) {
        localCounters[i].setBits(localCtrBits);
    }

    historyRegisterMask = mask(globalHistoryBits);
    localHistoryMask = localPredictorSize - 1;

    localThreshold = (ULL(1) << (localCtrBits - 1)) - 1;
}

/*
 * For an unconditional branch we set its history such that
 * everything is set to taken. I.e., its local predictor
 * chooses the taken array and the taken array predicts taken.
 */
void
Gshare::uncondBranch(ThreadID tid, Addr pc, void * &bpHistory)
{
    BPHistory *history = new BPHistory;
    history->globalHistoryReg = globalHistoryReg[tid];
    history->finalPred = true;
    bpHistory = static_cast<void*>(history);
    updateGlobalHistReg(tid, true);
}

void
Gshare::squash(ThreadID tid, void *bpHistory)
{
    BPHistory *history = static_cast<BPHistory*>(bpHistory);
    globalHistoryReg[tid] = history->globalHistoryReg;

    delete history;
}

/*
 * Here we lookup the actual branch prediction. We use the PC to
 * identify the bias of a particular branch, which is based on the
 * prediction in the local array. A hash of the global history
 * register and a branch's PC is used to index into both the taken
 * and not-taken predictors, which both present a prediction. The
 * local array's prediction is used to select between the two
 * direction predictors for the final branch prediction.
 */
bool
Gshare::lookup(ThreadID tid, Addr branchAddr, void * &bpHistory)
{
    unsigned localHistoryIdx = (((branchAddr >> instShiftAmt) ^ globalHistoryReg[tid]) & localHistoryMask);

    assert(localHistoryIdx < localPredictorSize);

    bool localPrediction = localCounters[localHistoryIdx].read()
                            > localThreshold;
    bool finalPrediction;

    BPHistory *history = new BPHistory;
    history->globalHistoryReg = globalHistoryReg[tid];

    finalPrediction = localPrediction;
    history->finalPred = finalPrediction;
    bpHistory = static_cast<void*>(history);
    updateGlobalHistReg(tid, finalPrediction);

    return finalPrediction;
}

void
Gshare::btbUpdate(ThreadID tid, Addr branchAddr, void * &bpHistory)
{
    globalHistoryReg[tid] &= (historyRegisterMask & ~ULL(1));
}

/* Only the selected direction predictor will be updated with the final
 * outcome; the status of the unselected one will not be altered. The local
 * predictor is always updated with the branch outcome, except when the
 * local is opposite to the branch outcome but the selected counter of
 * the direction predictors makes a correct final prediction.
 */
void
Gshare::update(ThreadID tid, Addr branchAddr, bool taken, void *bpHistory,
                 bool squashed)
{
    assert(bpHistory);

    BPHistory *history = static_cast<BPHistory*>(bpHistory);

    // We do not update the counters speculatively on a squash.
    // We just restore the global history register.
    if (squashed) {
        globalHistoryReg[tid] = (history->globalHistoryReg << 1) | taken;
        return;
    }
    else {
        delete history;
    }
    unsigned localHistoryIdx = (((branchAddr >> instShiftAmt) ^ globalHistoryReg[tid]) & localHistoryMask);
    
    assert(localHistoryIdx < localPredictorSize);

    if (taken) {
        localCounters[localHistoryIdx].increment();
    } else {
        localCounters[localHistoryIdx].decrement();
    }

}

unsigned
Gshare::getGHR(ThreadID tid, void *bp_history) const
{
    return static_cast<BPHistory*>(bp_history)->globalHistoryReg;
}

void
Gshare::updateGlobalHistReg(ThreadID tid, bool taken)
{
    globalHistoryReg[tid] = taken ? (globalHistoryReg[tid] << 1) | 1 :
                               (globalHistoryReg[tid] << 1);
    globalHistoryReg[tid] &= historyRegisterMask;
}

Gshare*
GshareParams::create()
{
    return new Gshare(this);
}
